<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
    scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位默认单位是毫秒，当scan为true时此属性生效，默认时间间隔为1分钟
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态，默认值为false
 -->
<configuration scan="true" scanPeriod="15 seconds" debug="true">
    <property name="LOG_HOME" value="${log.path:-./log}" debug="true"/>
    <property name="LOG_LEVEL" value="DEBUG"/>
    <property name="FRAMEWORK_LOG_LEVLE" value="DEBUG"/>

    <!--
        控制台日志
        appender是<configuration>的子节点，是负责写日志的组件
        两个必要属性name和class:name指定appender名称，class指定appender的全限定名
        定义控制台appender 作用:把日志输出到控制台 class="ch.qos.logback.core.ConsoleAppender"
    -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%date{yyyy‐MM‐dd HH:mm:ss}||%thread||%level||%logger:%line||%msg %ex||%n</pattern>
        </encoder>
    </appender>

    <!--
        文件日志
        定义滚动记录文件appender 作用:滚动记录文件,先将日志记录到指定文件,当符合某个条件时,将日志记录到其他文件
        RollingFileAppender class="ch.qos.logback.core.rolling.RollingFileAppender"
        参数：
            <append>:如果是true日志被追加到文件结尾，如果是false清空现存文件,默认是true
            <file>:被写入的文件名，可以是相对目录也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值
            <rollingPolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名
            <triggeringPolicy>:告知RollingFileAppender合适激活滚动
            <prudent>:当为true时不支持FixedWindowRollingPolicy支持TimeBasedRollingPolicy，但是有两个限制:1不支持也不允许文件压缩,2不能设置file属性必须留空
     -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>%date{yyyy‐MM‐dd HH:mm:ss}||%thread||%level||%logger:%line||%msg %ex||%n</pattern>
        </encoder>
        <file>${LOG_HOME}/framework-learn.log</file>
        <!--
            定义滚动记录文件appender 作用:滚动记录文件,先将日志记录到指定文件,当符合某个条件时,将日志记录到其他文件
            RollingFileAppender class="ch.qos.logback.core.rolling.RollingFileAppender"
            参数：
                <append>:如果是true日志被追加到文件结尾，如果是false清空现存文件,默认是true
                <file>:被写入的文件名，可以是相对目录也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值
                <rollingPolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名
                <triggeringPolicy>:告知RollingFileAppender合适激活滚动
                <prudent>:当为true时不支持FixedWindowRollingPolicy支持TimeBasedRollingPolicy，但是有两个限制:1不支持也不允许文件压缩,2不能设置file属性必须留空
         -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/framework-learn-%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>200MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>

    <logger name="com.lwb" level="${LOG_LEVEL}"/>
    <logger name="org.springframework" level="${FRAMEWORK_LOG_LEVLE}"/>
    <logger name="org.hibernate" level="${FRAMEWORK_LOG_LEVLE}"/>
    <logger name="org.mybatis" level="${FRAMEWORK_LOG_LEVLE}"/>
    <logger name="java.sql" level="${LOG_LEVEL}"/>
    <logger name="org.quartz" level="info"/>
    <!-- 日志级别 -->
    <root level="${LOG_LEVEL}">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
    </root>
</configuration>